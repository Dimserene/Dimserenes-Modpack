[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# need pos of card without click/hover
[[patches]]
[patches.pattern]
target = "engine/node.lua"
pattern = '''
point_translate(_p, _t)
'''
position = "after"
payload = '''
self.ccc_pos_offset.x = (_p.x - self.T.x)
self.ccc_pos_offset.y = (_p.y - self.T.y)
'''
match_indent = true

# initialise that
[[patches]]
[patches.pattern]
target = "engine/node.lua"
pattern = '''
self.hover_offset = {x = 0, y = 0}
'''
position = "after"
payload = '''
self.ccc_pos_offset = {x = 0, y = 0}
'''
match_indent = true

# test
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
self.ARGS.send_to_shader[1] = math.min(self.VT.r*3, 1) + G.TIMERS.REAL/(28) + (self.juice and self.juice.r*20 or 0) + self.tilt_var.amt
'''
position = "after"
payload = '''
if self.states.hover.is and (GLOBAL_ccc_count and GLOBAL_ccc_count or 0) > (GLOBAL_ccc_catchup and GLOBAL_ccc_catchup or 0) then

sendDebugMessage(self.base.value)
sendDebugMessage(self.base.suit)


GLOBAL_ccc_catchup = GLOBAL_ccc_count

local ccc_coords = {x = (self.ccc_pos_offset.x/self.T.w), y = (self.ccc_pos_offset.y/self.T.h)}
local function tn(num, den)
	local numerator = math.floor(num * den + 0.5)
	return math.min(math.max(numerator, 0), den)
end
-- sendDebugMessage(tn(ccc_coords.x, 71).."/71")
-- sendDebugMessage(tn(ccc_coords.y, 95).."/95")
self.ability.sticker_sprites = self.ability.sticker_sprites or {}
local c_index = #self.ability.sticker_sprites+1
self.ability.sticker_sprites[c_index] = {}
self.ability.sticker_sprites[c_index].coords = {x = (tn(ccc_coords.x, 71)*-1)/71,y = (tn(ccc_coords.y, 95)*-1)/95}
self.ability.sticker_sprites[c_index].sprite = Sprite(0, 0, G.CARD_W, G.CARD_H, G.ASSET_ATLAS["stickers"], {x = (tn(ccc_coords.x, 71)*-1)/71,y = (tn(ccc_coords.y, 95)*-1)/95})

end
'''
match_indent = true

# test
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if (self.ability.set == 'Voucher' or self.config.center.demo) and (self.ability.name ~= 'Antimatter' or not (self.config.center.discovered or self.bypass_discovery_center)) then
'''
position = "before"
payload = '''
if self.ability.sticker_sprites then
	for i=1, #self.ability.sticker_sprites do
		self.ability.sticker_sprites[i].sprite.role.draw_major = self
		self.ability.sticker_sprites[i].sprite:draw_shader('dissolve', nil, nil, nil, self.children.center)
		self.ability.sticker_sprites[i].sprite:draw_shader('voucher', nil, self.ARGS.send_to_shader, nil, self.children.center)
	end
end
'''
match_indent = true

# keybind
[[patches]]
[patches.pattern]
target = "engine/controller.lua"
pattern = '''
if key == "escape" then
'''
position = "before"
payload = '''
if key == "m" then 
	GLOBAL_ccc_count = GLOBAL_ccc_count and GLOBAL_ccc_count + 1 or 1
end
'''
match_indent = true

# this is gonna be a long file
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = 'if center.name == "Wee Joker" and (center.discovered or self.bypass_discovery_center) then'
position = "before"
payload = '''
if center.set == "InstaPix" then 
	H = H/1.2
	self.T.h = H
end
'''
match_indent = true


# again
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if _center.name == 'Photograph' and (_center.discovered or self.bypass_discovery_center) then"
position = "before"
payload = '''
if _center.set == "InstaPix" then 
	self.children.center.scale.y = self.children.center.scale.y/1.2
end
'''
match_indent = true

# once more for good luck
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = 'elseif self.config.center.name == "Wee Joker" then'
position = "before"
payload = '''
elseif self.config.center.set == "InstaPix" then
	self.T.h = H*scale/1.2*scale
        self.T.w = W*scale
'''
match_indent = true


