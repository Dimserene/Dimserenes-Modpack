[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# mirrored effect on cards in deck and discard pile
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "G.FUNCS.draw_from_hand_to_discard()"
position = "before"
payload = '''
for i = 1, #G.discard.cards do
	if G.discard.cards[i].edition ~= nil then
		if G.discard.cards[i].edition.ccc_mirrored == true then
			if not next(find_joker('ccc_Ominous Mirror')) and not next(find_joker('ccc_Badeline')) and not next(find_joker('ccc_Part Of You')) then
				G.discard.cards[i]:start_dissolve()
			end
		end
	end
end
for i = 1, #G.deck.cards do
	if G.deck.cards[i].edition ~= nil then
		if G.deck.cards[i].edition.ccc_mirrored == true then
			if not next(find_joker('ccc_Ominous Mirror')) and not next(find_joker('ccc_Badeline')) and not next(find_joker('ccc_Part Of You')) then
				G.deck.cards[i]:start_dissolve()
			end
		end
	end
end
'''
match_indent = true

# mirrored effect on cards in hand
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "local effects = {G.hand.cards[i]:get_end_of_round_effect()}"
position = "after"
payload = '''
	if G.hand.cards[i].edition ~= nil then
		if G.hand.cards[i].edition.ccc_mirrored == true then
			if not next(find_joker('ccc_Ominous Mirror')) and not next(find_joker('ccc_Badeline')) and not next(find_joker('ccc_Part Of You')) then
				if G.hand.cards[i].ability.name == 'Glass Card' then 
                    			G.hand.cards[i]:shatter()
				else
                    			G.hand.cards[i]:start_dissolve()
                		end
			end
		end
	end
'''
match_indent = true